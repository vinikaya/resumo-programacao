tsc script.ts ---- gera o arquivo javascript.

tsc script.ts --noEmitOnError  --- quando tiver erro o arquivo não é gerado.

Tipando as variaveis(nem sempre é necessario tipar, exemplo quando vc colocar o valor number de uma variavel no codigo, porem se o number for um input é necessario a tipagem):

	let nome: string = 'vinicius';
	let idade: number = 21;
	let programador: boolean = false;

Tipando os arrays:
	
	let nomes: string[] = ['vinicius','jao'];
	let idades: number[] = [90, 30, 32];
	let idades: Array<number> = [90, 30, 32]; --- mesma coisa do exempo a cima, porem é mais recomendado usar o primeiro exemplo.


Type any(faz o typescript ignorar a verificação de tipagem, logo aceita variaveis com tipos diferentes, porem é recomendado usar somente em ultimo caso):

	let nomes23: any = ['vini', 90];
	

função com tipagem(função que deixa a primeira letra maiuscula funcional):
	
	function firstletteruppercase(name: string){
    		let firstletter = name.charAt(0).toUpperCase();
    		return firstletter+name.substring(1);
	}


tipando o retorno da função:

	function somar (n1, n2): number {};

tipangem em objetos:

	function resumo (usuario: {nome:string, idade?: number}) { --- a interrogação serve para dizer que a idade pode ser enviada ou não, caso idade não seja recebido o valor dela será undefined e pode ser usado em um if.
	}

	let u = {
   		nome: 'vinicius',
    		idade: 21
	}	
	
	resumo(u);


union types, a variavel pode possuir mais de um tipo:

	let idade: string | number = 90;  --- nesse caso a variavel idade pode receber tanto string quanto number.


Criando um type proprio:

	type idade = string | number;
		
	let idade: idade = 90; ---- usando o tipo idade ele já reconhece que é string e number.
	

criando um type para um objeto:

	type User = {
	nome: string,
	idade: number
	}
	function resumo(usuario:User){} --- somente usando o user já tipa todos os objetos.


Criando interface(igual o type, usado para objetos):
	
	interface User {
	nome: string;
	idade: number;
	}

	interface User {  --- foi adicionado o item numero ao User.
	numero: number
	}

Diferença entre o type e interfaces: Depois que o type foi criado não pode ser adicionado novos itens, já interface pode.


Especificando elementos do html no typescript:

	let idadeField = document.getelementById('idade') as HTMLInputElement;

Types literias:(ele diz que os valores de retorno só podem ser esses, pode usaar variaveis, valores e etc).
	
	funtion valida(): true | false | 'verdadeiro' {}

Inferencia literal:(Ele reafirma que o method só pode receber o get e o post.)
	
	funtiona faze(method: 'GET' | 'POST') {}
	type methods = 'GET' | 'POST';
	faze(method: methods = 'GET');

Types para funções:(cria um type que diz os tipos das variaveis e o tipo do retorno)

	type MatchFunction = (n1: number, n2: number) => number;

	const somar: MatchFunction = (n1, n2 )=> {
    		return n1+n2;
	}

Void:( é usado quando a função não tem retorno, o type coloca automaticamente, porem pode ter outros usos, exemplo com um return dentro de um IF mesmo com o void não da erro, pois está dentro do if)
	
	functiona remover(): void {}


WatchMode, serve para alterar o arquivo TS e automaticamente mudar o arquivo JS em tempo real.

	No terminal: tsc src/script.ts -w
	para parar ctrl+c


tsconfig.json, arquivo de configuração do ts:

	terminal: tsc --init ---- escrever tsc no terminal configura todos os arquivos ts no projeto. Escrever tsc -w no terminal deixa todo o projeto sendo atualizado em tempo real, todos os arquivos.


Dentro da pasta tsconfig.json usar "exclude", todos os arquivos que forem colocados não serão configurados.
	, "exclude": ["src/script.ts"]


include faz com que só dentro do include seja atualizados.
	, "include":[ "src/*", "app.ts"] --- somente todos os arquivos da pasta src e um arquivo fora da pasta spp.ts.


Trabalhando com Libs, dentro do arquivo tsconfig.json, tem um item "lib", habilita esse item e coloca as lib que serão utilizadas, exemplo:
	"lib":["DOM", "ES5", DOM.Iterable", "ScriptHost"] --- esses quatro são o padrão para usar o ts, se deixar o lib comentado não muda.


OutDir, é um item do tsconfig.json, que diz ondem serão gerados os arquivos js:
	"outDir": "./public/js"

rootDir, diz onde estão os arquivos ts, e será replicado no outdir, toda a estrutura será replicada(nome de pastas). normalmente é usado junto com o outdir.tconfig

"removeComments": true, os comentario feitos no arquivo TS serão removidos no arquivo JS, é bom pois diminui o codigo js.tsconfig

"noEmitOnError": true, (tem q adicionar no tsconfig.json)não executa nenhum arquivo quando tiver agum erro, é bom pois se tiver um erro em um arquivo, não vai gerar o outros, podendo comprometer o projeto.tsconfig

"noUnusedLocals": true, avisa quando uma variavel não é usasada em escala local.tsconfig

"noUnusedParameters": true, avisa quando um parametro de uma função não é ultilizado. tsconfig
